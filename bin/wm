#!/usr/bin/env ruby

#
# RaWM Ruby as Window Manager
#
# An elliptical window manager
# See commentation in ../lib/wm/wm_ellipse.rb for overview
#
# ppibburr tulnor33@gmail.com
#

require File.join(ENV["XCB_PATH"],"lib","xcb.rb")
require File.expand_path(File.join(File.dirname(__FILE__),"..","lib","wm.rb"))
require File.expand_path(File.join(File.dirname(__FILE__),"..","lib","wm","fx_fade.rb"))

class MyWM < WM::EllipseWM
  class self::Client < WM::EllipseWM::Client
    # Blue looks nice
    BORDER = WM::BLUE # the focused window border color
    
    # Effects only work with a composition manager running
    # Tested with:
    #   xcompmgr - very buggy
    #   unagi    - buggy
    #   compton  - awesome
    #
    #
    # Shutdown the composition manager to regain input
    #
    # Comment the next line to disable composition effects 
    include WM::FX::Fade 
    
    # We write the focused window id
    STATUS = "#{ENV['HOME']}/.mywm_status.txt"
    
    # overide to update the status file
    # dzen2 status tool @ /path/to/RaWM/scripts/statusbar.rb (requires xdotool, dzen2 and i3status)
    def focus
      super
      
      File.open(STATUS,"w") do |f|
        f.puts "#{window.id}"
      end
    end
  end
  
  def manage_existing(*o)
    super
    at_startup()
  end
  
  def at_startup()
    STARTUP.each do |t|
      send *t
    end
  end
  
  STARTUP = []
  
  def self.add_startup_task *task
    STARTUP << task
  end
   
  def initialize *o
    super  
	#
	# Key bindings
	#

	#               Alt1   t  
	add_key_binding :Alt, :t, :spawn, "x-terminal-emulator" # launch terminal
	#                      w
	add_key_binding :Alt, :w, :spawn, "x-www-browser"       # launch web browser
	#                      p
	add_key_binding :Alt, :p, :spawn, "dmenu_run"           # launch dmenu launcher  
  end
end

begin
  # Use the arrow instead of the X
  MyWM::add_startup_task :spawn,"xsetroot -cursor_name  left_ptr"

  m = MyWM.new(WM::SCREEN,WM::CONNECTION)

  Signal.trap("INT") do
    m.on_abort(1)
  end
  
  if ARGV[0] == "--status"
    path = File.expand_path(File.join(File.dirname(__FILE__),"..","scripts","statusbar.rb"))
    MyWM::add_startup_task :spawn,"ruby #{path}"
  end

  m.main
rescue => e
  puts "OOPS!! #{e} happened."
  exit(1)
end
